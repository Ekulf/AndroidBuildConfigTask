<?xml version="1.0" encoding="UTF-8"?>
<property
    name="localbuildtask.jar"
    location="libs/AndroidBuildConfigTask.jar" />

<taskdef
    name="androidbuildconfig"
    classname="com.ekulf.android.ant.tasks.BuildConfigTask"
    classpath="${localbuildtask.jar}" />

<target name="-post-build">
    <record-build-key
        key="build.last.is.packaging.market"
        value="${build.is.packaging.market}" />
</target>

<target name="-pre-build" >
    <if>
        <condition>
            <and>
                <length
                    length="0"
                    string="${build.last.is.packaging.market}"
                    trim="true"
                    when="greater" />
                <not>
                    <equals
                        arg1="${build.is.packaging.market}"
                        arg2="${build.last.is.packaging.market}" />
                </not>
            </and>
        </condition>
        <then>
            <echo level="info" >Switching between market builds: Deleting previous compilation output...</echo>
            <delete
                dir="${out.classes.absolute.dir}"
                verbose="${verbose}" />
        </then>
    </if>

    <mkdir dir="${out.classes.absolute.dir}" />
</target>

<target name="-code-gen" >

    <!-- always merge manifest -->

    <mergemanifest
        appManifest="${manifest.abs.file}"
        enabled="${manifestmerger.enabled}"
        outManifest="${out.manifest.abs.file}" >

        <library refid="project.library.manifest.file.path" />
    </mergemanifest>

    <do-only-if-manifest-hasCode elseText="hasCode = false. Skipping aidl/renderscript/R.java" >

        <echo level="info" >Handling aidl files...</echo>

        <aidl
            aidlOutFolder="${out.aidl.absolute.dir}"
            executable="${aidl}"
            framework="${project.target.framework.aidl}"
            genFolder="${gen.absolute.dir}"
            libraryBinAidlFolderPathRefid="project.library.bin.aidl.folder.path" >

            <source path="${source.absolute.dir}" />
        </aidl>

        <!-- renderscript generates resources so it must be called before aapt -->

        <echo level="info" >----------</echo>

        <echo level="info" >Handling RenderScript files...</echo>

        <renderscript
            buildType="${build.is.packaging.debug}"
            executable="${renderscript}"
            genFolder="${gen.absolute.dir}"
            includePath="${android.renderscript.include.path}"
            optLevel="${renderscript.opt.level}"
            previousBuildType="${build.last.is.packaging.debug}"
            resFolder="${out.res.absolute.dir}/raw"
            targetApi="${project.minSdkVersion}" >

            <source path="${source.absolute.dir}" />
        </renderscript>

        <echo level="info" >----------</echo>
        <echo level="info" >Handling Resources...</echo>

        <aapt
            androidjar="${project.target.android.jar}"
            command="package"
            executable="${aapt}"
            ignoreAssets="${aapt.ignore.assets}"
            libraryPackagesRefid="project.library.packages"
            libraryResFolderPathRefid="project.library.res.folder.path"
            manifest="${out.manifest.abs.file}"
            nonConstantId="${android.library}"
            proguardFile="${out.absolute.dir}/proguard.txt"
            rfolder="${gen.absolute.dir}"
            verbose="${verbose}" >

            <res path="${out.res.absolute.dir}" />

            <res path="${resource.absolute.dir}" />
        </aapt>

        <echo level="info" >----------</echo>
        <echo level="info" >Handling BuildConfig class...</echo>

        <androidbuildconfig
            buildType="${build.is.packaging.debug}"
            genFolder="${gen.absolute.dir}"
            market="${build.is.packaging.market}"
            package="${project.app.package}"
            previousBuildType="${build.last.is.packaging.debug}"
            previousMarket="${build.last.is.packaging.market}" />
    </do-only-if-manifest-hasCode>
</target>

<target name="-set-play-market" >

    <property
        name="build.is.packaging.market"
        value="PLAY" />
</target>

<target
    name="-set-play-market-release"
    depends="-set-play-market" >

    <property
        name="out.final.file"
        location="${out.absolute.dir}/${ant.project.name}-play-release.apk" />
</target>

<target
    name="-set-play-market-debug"
    depends="-set-play-market" >

    <property
        name="out.final.file"
        location="${out.absolute.dir}/${ant.project.name}-play-debug.apk" />
</target>

<target name="-set-amazon-market" >

    <property
        name="build.is.packaging.market"
        value="AMAZON" />
</target>

<target
    name="-set-amazon-market-release"
    depends="-set-amazon-market" >

    <property
        name="out.final.file"
        location="${out.absolute.dir}/${ant.project.name}-amazon-release.apk" />
</target>

<target
    name="-set-amazon-market-debug"
    depends="-set-amazon-market" >

    <property
        name="out.final.file"
        location="${out.absolute.dir}/${ant.project.name}-amazon-debug.apk" />
</target>

<target name="-set-ouya-market" >

    <property
        name="build.is.packaging.market"
        value="OUYA" />
</target>

<target
    name="-set-ouya-market-release"
    depends="-set-ouya-market" >

    <property
        name="out.final.file"
        location="${out.absolute.dir}/${ant.project.name}-ouya-release.apk" />
</target>

<target
    name="-set-ouya-market-debug"
    depends="-set-ouya-market" >

    <property
        name="out.final.file"
        location="${out.absolute.dir}/${ant.project.name}-ouya-debug.apk" />
</target>

<target
    name="play-release"
    depends="-set-play-market-release, release"
    description="Builds the application in release mode for Google Play." >
</target>

<target
    name="amazon-release"
    depends="-set-amazon-market-release, release"
    description="Builds the application in release mode for Amazon Market." >
</target>

<target
    name="ouya-release"
    depends="-set-ouya-market-release, release"
    description="Builds the application in release mode for Ouya." >
</target>

<target
    name="play-debug"
    depends="-set-play-market-debug, debug"
    description="Builds the application in debug mode for Google Play." >
</target>

<target
    name="amazon-debug"
    depends="-set-amazon-market-debug, debug"
    description="Builds the application in debug mode for Amazon Market." >
</target>

<target
    name="ouya-debug"
    depends="-set-ouya-market-debug, debug"
    description="Builds the application in debug mode for Ouya." >
</target>